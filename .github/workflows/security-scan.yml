name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - '.github/workflows/security-scan.yml'

env:
  AWS_REGION: us-east-1

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Get latest image tag
      id: get-tag
      run: |
        LATEST_TAG=$(aws ecr describe-images \
          --repository-name clo835-webapp \
          --query 'sort_by(imageDetails,& imageDigest)[*].imageTags[0]' \
          --output text | tail -1)
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.get-tag.outputs.tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (JSON output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.ECR_REPOSITORY_URI }}:${{ steps.get-tag.outputs.tag }}
        format: 'json'
        output: 'trivy-results.json'
        
    - name: Check for critical vulnerabilities
      run: |
        CRITICAL=$(cat trivy-results.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL") | .VulnerabilityID' | wc -l)
        HIGH=$(cat trivy-results.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | .VulnerabilityID' | wc -l)
        
        echo "Critical vulnerabilities: $CRITICAL"
        echo "High vulnerabilities: $HIGH"
        
        if [ $CRITICAL -gt 0 ]; then
          echo "❌ CRITICAL vulnerabilities found! Failing the workflow."
          cat trivy-results.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")'
          exit 1
        elif [ $HIGH -gt 5 ]; then
          echo "⚠️  More than 5 HIGH severity vulnerabilities found. Consider updating dependencies."
          cat trivy-results.json | jq '.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH") | {VulnerabilityID, PkgName, Severity, Description}'
        else
          echo "✅ Security scan passed with acceptable risk level."
        fi
        
    - name: Upload scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.json
          trivy-results.sarif
        retention-days: 30

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install safety
      run: pip install safety
      
    - name: Run safety check
      run: |
        safety check -r requirements.txt --json --output safety-results.json || true
        
    - name: Process safety results
      run: |
        if [ -f safety-results.json ]; then
          VULNERABILITIES=$(cat safety-results.json | jq length)
          echo "Found $VULNERABILITIES dependency vulnerabilities"
          
          if [ $VULNERABILITIES -gt 0 ]; then
            echo "⚠️  Dependency vulnerabilities found:"
            cat safety-results.json | jq '.[].vulnerability'
          else
            echo "✅ No dependency vulnerabilities found"
          fi
        fi
        
    - name: Upload dependency results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: safety-results.json
        retention-days: 30