name: CLO835 Final Project CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: clo835fp-webapp
  EKS_CLUSTER_NAME: clo835-eks-cluster
  NAMESPACE: fp
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Test and Code Quality Check
  test:
    name: Test and Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov
        
    - name: Run linting
      run: |
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Verify application structure
      run: |
        echo "Verifying Flask application structure..."
        python -c "import app; print('‚úÖ App module loads successfully')"
        echo "‚úÖ Requirements.txt dependencies installed"

  # Job 2: Build and Push Docker Image to ECR
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build
      run: |
        # Get AWS Account ID and construct ECR URI
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
        IMAGE_TAG=${{ github.sha }}
        IMAGE_URI=${ECR_URI}:${IMAGE_TAG}
        
        echo "Building and pushing image: $IMAGE_URI"
        
        # Ensure ECR repository exists
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}
        
        # Build image
        docker build -t $IMAGE_URI .
        docker tag $IMAGE_URI $ECR_URI:latest
        
        # Push image to ECR
        docker push $IMAGE_URI
        docker push $ECR_URI:latest
        
        echo "Successfully pushed: $IMAGE_URI"
        echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ steps.build.outputs.image-uri }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Job 3: Create EKS Infrastructure
  create-infrastructure:
    name: Create EKS Infrastructure
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version
        
    - name: Check if EKS cluster exists
      id: check-cluster
      run: |
        if aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "EKS cluster ${{ env.EKS_CLUSTER_NAME }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "EKS cluster ${{ env.EKS_CLUSTER_NAME }} does not exist"
        fi
        
    - name: Create EKS cluster
      if: steps.check-cluster.outputs.exists == 'false'
      run: |
        echo "Creating EKS cluster ${{ env.EKS_CLUSTER_NAME }}..."
        eksctl create cluster -f eks-cluster.yaml
        echo "EKS cluster created successfully!"
        
    - name: Wait for cluster to be ready
      run: |
        echo "Waiting for cluster to be ready..."
        aws eks wait cluster-active --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        echo "EKS cluster is ready!"

  # Job 4: Validate Kubernetes Manifests  
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes YAML syntax..."
        # Simple YAML syntax validation using Python
        python -c "import yaml, glob; [yaml.safe_load_all(open(f).read()) for f in glob.glob('k8s-manifests/*.yaml')]" || exit 1
        echo "All Kubernetes manifests have valid YAML syntax!"

  # Job 5: Deploy to EKS (only on main branch)
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [test, build-and-push, create-infrastructure, validate-k8s]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
    - name: Verify cluster access
      run: |
        kubectl get nodes
        kubectl get namespaces
        
    - name: Deploy application to EKS
      run: |
        echo "üöÄ Starting CLO835 Final Project Deployment to EKS..."
        
        # Apply all Kubernetes manifests in correct order
        echo "üì¶ Applying Kubernetes manifests..."
        kubectl apply -f k8s-manifests/namespace.yaml
        kubectl apply -f k8s-manifests/rbac.yaml
        kubectl apply -f k8s-manifests/pvc.yaml
        kubectl apply -f k8s-manifests/configmap.yaml
        
        # Create secrets with actual values from GitHub Secrets
        echo "üîê Creating AWS secrets..."
        kubectl create secret generic aws-secret -n ${{ env.NAMESPACE }} \
          --from-literal=AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          --from-literal=AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -
          
        # Create MySQL secrets
        echo "üîê Creating MySQL secrets..."
        kubectl create secret generic mysql-secret -n ${{ env.NAMESPACE }} \
          --from-literal=DBUSER="root" \
          --from-literal=DBPWD="clo835_password123" \
          --from-literal=MYSQL_ROOT_PASSWORD="clo835_password123" \
          --from-literal=MYSQL_DATABASE="employees" \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply MySQL components
        kubectl apply -f k8s-manifests/mysql-deployment.yaml
        kubectl apply -f k8s-manifests/mysql-service.yaml
        
        # Wait for MySQL to be ready
        echo "‚è≥ Waiting for MySQL to be ready..."
        kubectl wait --for=condition=available deployment/mysql-deployment -n ${{ env.NAMESPACE }} --timeout=180s
        
        # Deploy webapp with updated image
        kubectl apply -f k8s-manifests/webapp-deployment.yaml
        kubectl apply -f k8s-manifests/webapp-service.yaml
        
        # Update webapp deployment with the new image
        IMAGE_URI="${{ needs.build-and-push.outputs.image-uri }}"
        echo "üîÑ Updating webapp image to: $IMAGE_URI"
        kubectl set image deployment/webapp-deployment webapp=${IMAGE_URI} -n ${{ env.NAMESPACE }}
        
        # Wait for rollout to complete
        echo "‚è≥ Waiting for webapp deployment rollout..."
        kubectl rollout status deployment/webapp-deployment -n ${{ env.NAMESPACE }} --timeout=300s
        
        echo "‚úÖ Deployment completed successfully!"
        
    - name: Verify deployment
      run: |
        echo "üîç Verifying CLO835 Final Project deployment..."
        
        echo "üìä Pod Status:"
        kubectl get pods -n ${{ env.NAMESPACE }} -o wide
        
        echo "üåê Services:"
        kubectl get services -n ${{ env.NAMESPACE }} -o wide
        
        echo "üöÄ Deployments:"
        kubectl get deployments -n ${{ env.NAMESPACE }} -o wide
        
        echo "üíæ Persistent Volumes:"
        kubectl get pvc -n ${{ env.NAMESPACE }}
        kubectl get pv
        
        echo "üîß ConfigMaps:"
        kubectl get configmap -n ${{ env.NAMESPACE }}
        
        # Check pod logs for any issues
        echo "üìù Recent webapp logs:"
        kubectl logs -l app=webapp -n ${{ env.NAMESPACE }} --tail=10 || echo "No webapp logs yet"
        
        echo "üìù Recent mysql logs:"
        kubectl logs -l app=mysql -n ${{ env.NAMESPACE }} --tail=10 || echo "No mysql logs yet"
        
    - name: Get application URL
      id: get-url
      run: |
        echo "Waiting for LoadBalancer to be ready..."
        sleep 60
        
        URL=$(kubectl get svc webapp-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        if [ -z "$URL" ]; then
          echo "LoadBalancer is still provisioning. Use kubectl port-forward for testing."
          echo "url=pending" >> $GITHUB_OUTPUT
        else
          echo "url=http://$URL" >> $GITHUB_OUTPUT
          echo "Application URL: http://$URL"
        fi

  # Job 5: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build-and-push, validate-k8s, deploy]
    if: always()
    
    steps:
    - name: Prepare notification message
      id: prepare
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" && "${{ needs.validate-k8s.result }}" == "success" ]]; then
          echo "status=‚úÖ Success" >> $GITHUB_OUTPUT
          echo "message=CLO835 Pipeline completed successfully! Image: ${{ needs.build-and-push.outputs.image-uri }} deployed to EKS." >> $GITHUB_OUTPUT
        else
          echo "status=‚ùå Failed" >> $GITHUB_OUTPUT
          echo "message=CLO835 Pipeline failed. Check the logs for details." >> $GITHUB_OUTPUT
        fi
        
    - name: Send notification
      run: |
        echo "=== CLO835 Final Project Deployment Status ==="
        echo "Status: ${{ steps.prepare.outputs.status }}"
        echo "Message: ${{ steps.prepare.outputs.message }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"