name: CLO835 Final Project CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: clo835fp-webapp
  EKS_CLUSTER_NAME: clo835-eks-cluster
  NAMESPACE: fp
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Test and Code Quality Check
  test:
    name: Test and Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov
        
    - name: Run linting
      run: |
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Verify application structure
      run: |
        echo "Verifying Flask application structure..."
        python -c "import app; print('✅ App module loads successfully')"
        echo "✅ Requirements.txt dependencies installed"

  # Job 2: Build and Push Docker Image to ECR
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Ensure ECR repository exists
      run: |
        set -e
        REPO_NAME=${{ env.ECR_REPOSITORY }}
        if ! aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1; then
          echo "ECR repository $REPO_NAME not found. Creating..."
          aws ecr create-repository --repository-name "$REPO_NAME" >/dev/null
          echo "ECR repository $REPO_NAME created."
        else
          echo "ECR repository $REPO_NAME exists."
        fi
      env:
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Compute ECR repository URL
      id: ecr
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "url=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.ecr.outputs.url }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          # Avoid empty branch name in PR which produced invalid tag like ":-<sha>"
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ steps.build.outputs.image-uri }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Job 3: Validate Kubernetes Manifests  
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes manifests..."
        kubectl --dry-run=client apply -f k8s-manifests/
        echo "All manifests are valid!"

  # Job 4: Deploy to EKS (only on main branch)
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [test, build-and-push, validate-k8s]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
    - name: Update deployment manifests and deploy
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
        IAM_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/LabRole"
        
        # Update webapp deployment with correct image URI
        sed -i "s|\${ECR_REPOSITORY_URI}|${ECR_URL}|g" k8s-manifests/webapp-deployment.yaml
        
        # Update service account with IAM role ARN
        sed -i "s|\${IAM_ROLE_ARN}|${IAM_ROLE_ARN}|g" k8s-manifests/rbac.yaml
        
        # Apply manifests
        kubectl apply -f k8s-manifests/
        
        # Update webapp deployment to use current image tag
        kubectl set image deployment/webapp webapp=${ECR_URL}:sha-${{ github.sha }} -n ${{ env.NAMESPACE }}
        kubectl rollout status deployment/webapp -n ${{ env.NAMESPACE }} --timeout=300s
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        kubectl get pods -n ${{ env.NAMESPACE }}
        kubectl get services -n ${{ env.NAMESPACE }}
        kubectl get deployments -n ${{ env.NAMESPACE }}
        
    - name: Get application URL
      id: get-url
      run: |
        echo "Waiting for LoadBalancer to be ready..."
        sleep 60
        
        URL=$(kubectl get svc webapp-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        if [ -z "$URL" ]; then
          echo "LoadBalancer is still provisioning. Use kubectl port-forward for testing."
          echo "url=pending" >> $GITHUB_OUTPUT
        else
          echo "url=http://$URL" >> $GITHUB_OUTPUT
          echo "Application URL: http://$URL"
        fi

  # Job 5: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build-and-push, validate-k8s, deploy]
    if: always()
    
    steps:
    - name: Prepare notification message
      id: prepare
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build-and-push.result }}" == "success" && "${{ needs.validate-k8s.result }}" == "success" ]]; then
          echo "status=✅ Success" >> $GITHUB_OUTPUT
          echo "message=CLO835 Pipeline completed successfully! Image: ${{ needs.build-and-push.outputs.image-uri }} deployed to EKS." >> $GITHUB_OUTPUT
        else
          echo "status=❌ Failed" >> $GITHUB_OUTPUT
          echo "message=CLO835 Pipeline failed. Check the logs for details." >> $GITHUB_OUTPUT
        fi
        
    - name: Send notification
      run: |
        echo "=== CLO835 Final Project Deployment Status ==="
        echo "Status: ${{ steps.prepare.outputs.status }}"
        echo "Message: ${{ steps.prepare.outputs.message }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"