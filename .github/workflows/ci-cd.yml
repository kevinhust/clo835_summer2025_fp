name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_run:
    workflows: ["Terraform Infrastructure"]
    types:
      - completed

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: clo835-webapp
  PYTHON_VERSION: '3.9'

jobs:
  # Job 0: Get Terraform Outputs (only when triggered by terraform workflow)
  get-terraform-outputs:
    name: Get Infrastructure Information
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    
    outputs:
      eks_cluster_name: ${{ steps.tf_outputs.outputs.eks_cluster_name }}
      ecr_repository_url: ${{ steps.tf_outputs.outputs.ecr_repository_url }}
      s3_bucket_name: ${{ steps.tf_outputs.outputs.s3_bucket_name }}
      
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get Terraform Outputs
      id: tf_outputs
      run: |
        # Use AWS CLI to get outputs from terraform state
        echo "eks_cluster_name=clo835-eks-cluster" >> $GITHUB_OUTPUT
        # Get AWS account ID and construct ECR URI
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "ecr_repository_url=${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/webapp" >> $GITHUB_OUTPUT
        echo "s3_bucket_name=clo835fp-background-images" >> $GITHUB_OUTPUT

  # Job 1: Test and Build
  test-and-build:
    name: Test Application and Build Docker Image
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional testing dependencies
        pip install pytest pytest-flask pytest-mock
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        # Mock environment variables for testing
        DBHOST: localhost
        DBUSER: testuser
        DBPWD: testpass
        DATABASE: testdb
        DBPORT: 3306
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_REGION: us-east-1
        
    - name: Run linting
      run: |
        pip install flake8
        flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ needs.get-terraform-outputs.outputs.ecr_repository_url }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.get-terraform-outputs.outputs.ecr_repository_url }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Job 2: Validate Kubernetes Manifests
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes manifests..."
        kubectl --dry-run=client apply -f k8s-manifests/
        echo "All manifests are valid!"
        
    - name: Run kubeval for manifest validation
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin
        find k8s-manifests/ -name '*.yaml' -exec kubeval {} \;

  # Job 3: Deploy (only on main branch)
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [test-and-build, validate-k8s]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.get-url.outputs.url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name clo835-eks-cluster
        
    - name: Update deployment image
      run: |
        kubectl set image deployment/webapp webapp=${{ needs.get-terraform-outputs.outputs.ecr_repository_url }}:${{ github.sha }} -n clo835
        kubectl rollout status deployment/webapp -n clo835 --timeout=300s
        
    - name: Get application URL
      id: get-url
      run: |
        URL=$(kubectl get svc webapp-service -n clo835 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "url=http://$URL" >> $GITHUB_OUTPUT
        echo "Application deployed at: http://$URL"
        
    - name: Run deployment verification
      run: |
        echo "Verifying deployment..."
        kubectl get pods -n clo835
        kubectl get services -n clo835
        echo "Deployment verification completed"

  # Job 4: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test-and-build, validate-k8s, deploy]
    if: always()
    
    steps:
    - name: Prepare notification message
      id: prepare
      run: |
        if [[ "${{ needs.test-and-build.result }}" == "success" && "${{ needs.validate-k8s.result }}" == "success" ]]; then
          echo "status=✅ Success" >> $GITHUB_OUTPUT
          echo "message=Pipeline completed successfully! Image pushed to ECR and deployed." >> $GITHUB_OUTPUT
        else
          echo "status=❌ Failed" >> $GITHUB_OUTPUT
          echo "message=Pipeline failed. Check the logs for details." >> $GITHUB_OUTPUT
        fi
        
    - name: Send notification
      run: |
        echo "Pipeline Status: ${{ steps.prepare.outputs.status }}"
        echo "Message: ${{ steps.prepare.outputs.message }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Actor: ${{ github.actor }}"